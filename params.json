{"name":"AppAuth for iOS","tagline":"","body":"AppAuth for iOS is a client SDK for communicating with [OAuth 2.0]\r\n(https://tools.ietf.org/html/rfc6749) and [OpenID Connect]\r\n(http://openid.net/specs/openid-connect-core-1_0.html) providers. It strives to\r\ndirectly map the requests and responses of those specifications, while following\r\nthe idiomatic style of the implementation language. In addition to mapping the\r\nraw protocol flows, convenience methods are available to assist with common\r\ntasks like performing an action with fresh tokens.\r\n\r\nIt follows the best practices set out in [OAuth 2.0 for Native Apps]\r\n(https://tools.ietf.org/html/draft-ietf-oauth-native-apps)\r\nincluding using `SFSafariViewController` for the auth request. For this reason,\r\n`UIWebView` is explicitly *not* supported due to usability and security reasons.\r\n\r\nIt also supports the [PKCE](https://tools.ietf.org/html/rfc7636) extension to\r\nOAuth which was created to secure authorization codes in public clients when\r\ncustom URI scheme redirects are used. The library is friendly to other\r\nextensions (standard or otherwise) with the ability to handle additional params\r\nin all protocol requests and responses.\r\n\r\n## Specification\r\n\r\n### Supported iOS Versions\r\n\r\nAppAuth supports iOS 7 and above.\r\n\r\niOS 9+ uses the in-app browser tab pattern\r\n(via `SFSafariViewController`), and falls back to the system browser (mobile\r\nSafari) on earlier versions.\r\n\r\n### Authorization Server Support\r\n\r\nBoth Custom URI Schemes (all supported versions of iOS) and Universal Links\r\n(iOS 9+) can be used with the library.\r\n\r\nIn general, AppAuth can work with any Authorization Server (AS) that supports\r\n[native apps](https://tools.ietf.org/html/draft-ietf-oauth-native-apps-00),\r\neither through custom URI scheme redirects, or universal links.\r\nAS's that assume all clients are web-based or require clients to maintain\r\nconfidentiality of the client secrets may not work well.\r\n\r\n## Try\r\n\r\nWant to try out AppAuth? Just run:\r\n\r\n    pod try AppAuth\r\n\r\nFollow the instructions in [Example/README.md](Example/README.md) to configure\r\nwith your own OAuth client (you need to update 3 configuration points with your\r\nclient info to try the demo).\r\n\r\n## Setup\r\n\r\nIf you use [CocoaPods](https://guides.cocoapods.org/using/getting-started.html),\r\nsimply add:\r\n\r\n    pod 'AppAuth'\r\n\r\nTo your `Podfile` and run `pod install`. Otherwise, add `AppAuth.xcodeproj`\r\ninto your workspace.\r\n\r\n## Auth Flow\r\n\r\nAppAuth supports both manual interaction with the Authorization Server\r\nwhere you need to perform your own token exchanges, as well as convenience\r\nmethods that perform some of this logic for you. This example uses the\r\nconvenience method which returns either an `OIDAuthState` object, or an error.\r\n\r\n`OIDAuthState` is a class that keeps track of the authorization and token\r\nrequests and responses, and provides a convenience method to call an API with\r\nfresh tokens. This is the only object that you need to serialize to retain the\r\nauthorization state of the session.\r\n\r\n### Configuration\r\n\r\nYou can configure AppAuth by specifying the endpoints directly:\r\n\r\n```objc\r\nNSURL *authorizationEndpoint =\r\n    [NSURL URLWithString:@\"https://accounts.google.com/o/oauth2/v2/auth\"];\r\nNSURL *tokenEndpoint =\r\n    [NSURL URLWithString:@\"https://www.googleapis.com/oauth2/v4/token\"];\r\n\r\nOIDServiceConfiguration *configuration =\r\n    [[OIDServiceConfiguration alloc]\r\n        initWithAuthorizationEndpoint:authorizationEndpoint\r\n                        tokenEndpoint:tokenEndpoint];\r\n\r\n// perform the auth request...\r\n```\r\n\r\nOr through discovery:\r\n\r\n```objc\r\nNSURL *issuer = [NSURL URLWithString:@\"https://accounts.google.com\"];\r\n\r\n[OIDAuthorizationService discoverServiceConfigurationForIssuer:issuer\r\n    completion:^(OIDServiceConfiguration *_Nullable configuration,\r\n                 NSError *_Nullable error) {\r\n\r\n  if (!configuration) {\r\n    NSLog(@\"Error retrieving discovery document: %@\",\r\n          [error localizedDescription]);\r\n    return;\r\n  }\r\n\r\n  // perform the auth request...\r\n}];\r\n```\r\n\r\n### Authorizing\r\n\r\nFirst you need to have a property in your AppDelegate to hold the session, in\r\norder to continue the authorization flow from the redirect.\r\n\r\n```objc\r\n// property of the app's AppDelegate\r\n@property(nonatomic, strong, nullable) id<OIDAuthorizationFlowSession> currentAuthorizationFlow;\r\n```\r\n\r\nAnd your main class, a property to store the auth state:\r\n\r\n```objc\r\n// property of the containing class\r\n@property(nonatomic, strong, nullable) OIDAuthState *authState;\r\n```\r\n\r\nThen, initiate the authorization request. By using the \r\n`authStateByPresentingAuthorizationRequest` convenience method, the token\r\nexchange will be performed automatically, and everything will be protected with\r\nPKCE (if the server supports it). AppAuth also allows you to perform these\r\nrequests manually. See the `authNoCodeExchange` method in the included Example\r\napp for a demonstration.\r\n\r\n```objc\r\n// builds authentication request\r\nOIDAuthorizationRequest *request =\r\n    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration\r\n                                                  clientId:kClientID\r\n                                                    scopes:@[OIDScopeOpenID, OIDScopeProfile]\r\n                                               redirectURL:KRedirectURI\r\n                                              responseType:OIDResponseTypeCode\r\n                                      additionalParameters:nil];\r\n\r\n// performs authentication request\r\nAppDelegate *appDelegate =\r\n    (AppDelegate *)[UIApplication sharedApplication].delegate;\r\nappDelegate.currentAuthorizationFlow =\r\n    [OIDAuthState authStateByPresentingAuthorizationRequest:request\r\n        presentingViewController:self\r\n                        callback:^(OIDAuthState *_Nullable authState,\r\n                                   NSError *_Nullable error) {\r\n  if (authState) {\r\n    NSLog(@\"Got authorization tokens. Access token: %@\",\r\n          authState.lastTokenResponse.accessToken);\r\n    [self setAuthState:authState];\r\n  } else {\r\n    NSLog(@\"Authorization error: %@\", [error localizedDescription]);\r\n    [self setAuthState:nil];\r\n  }\r\n}];\r\n```\r\n\r\n### Handling the Redirect\r\n\r\nThe authorization response URL is returned to the app via the iOS openURL\r\napp delegate method, so you need to pipe this through to the current\r\nauthorization session (created in the previous session).\r\n\r\n```objc\r\n- (BOOL)application:(UIApplication *)app\r\n            openURL:(NSURL *)url\r\n            options:(NSDictionary<NSString *, id> *)options {\r\n  // Sends the URL to the current authorization flow (if any) which will\r\n  // process it if it relates to an authorization response.\r\n  if ([_currentAuthorizationFlow resumeAuthorizationFlowWithURL:url]) {\r\n    _currentAuthorizationFlow = nil;\r\n    return YES;\r\n  }\r\n\r\n  // Your additional URL handling (if any) goes here.\r\n\r\n  return NO;\r\n}\r\n```\r\n\r\n### Making API Calls\r\n\r\nAppAuth gives you the raw token information, if you need it. However we\r\nrecommend that users of the `OIDAuthState` convenience wrapper use the provided\r\n`withFreshTokensPerformAction:` method to perform their API calls to avoid\r\nneeding to worry about token freshness.\r\n\r\n```objc\r\n[_authState withFreshTokensPerformAction:^(NSString *_Nonnull accessToken,\r\n                                           NSString *_Nonnull idToken,\r\n                                           NSError *_Nullable error) {\r\n  if (error) {\r\n    NSLog(@\"Error fetching fresh tokens: %@\", [error localizedDescription]);\r\n    return;\r\n  }\r\n\r\n  // perform your API request using the tokens\r\n}];\r\n```\r\n\r\n## API Documentation\r\n\r\nBrowse the [API documentation](http://openid.github.io/AppAuth-iOS/docs/latest/annotated.html).\r\n\r\n## Included Sample\r\n\r\nYou can try out sample included in the source distribution by opening\r\n`Example/Example.xcworkspace`. You can easily convert the Example\r\nworkspace to a Pod workspace by deleting the `AppAuth` project, and\r\n[configuring the pod](#setup).\r\n\r\nYou can also [try out the sample via CocoaPods](#try).\r\n\r\nBe sure to follow the instructions in [Example/README.md](Example/README.md)\r\nto configure your own OAuth client ID for use with the example.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}