{"name":"AppAuth for iOS","tagline":"","body":"AppAuth for iOS is a client SDK for communicating with [OAuth 2.0]\r\n(https://tools.ietf.org/html/rfc6749) and [OpenID Connect]\r\n(http://openid.net/specs/openid-connect-core-1_0.html) providers. It strives to\r\ndirectly map the requests and responses of those specifications, while following\r\nthe idiomatic style of the implementation language. In addition to mapping the\r\nraw protocol flows, convenience methods are available to assist with common\r\ntasks like performing an action with fresh tokens.\r\n\r\nIt follows the best practices set out in [OAuth 2.0 for Native Apps]\r\n(https://tools.ietf.org/html/draft-ietf-oauth-native-apps)\r\nincluding using `SFSafariViewController` for the auth request. For this reason,\r\n`UIWebView` is explicitly *not* supported due to usability and security reasons.\r\n\r\nIt also supports the [PKCE](https://tools.ietf.org/html/rfc7636) extension to\r\nOAuth which was created to secure authorization codes in public clients when\r\ncustom URI scheme redirects are used. The library is friendly to other\r\nextensions (standard or otherwise) with the ability to handle additional params\r\nin all protocol requests and responses.\r\n\r\n## Example Auth Flow\r\n\r\nAppAuth supports both manual interaction with the Authorization Server\r\nwhere you need to perform your own token exchanges, as well as convenience\r\nmethods that perform some of this logic for you. This example uses the\r\nconvenience method which returns either an `OIDAuthState` object, or an error.\r\n\r\n`OIDAuthState` is a class that keeps track of the authorization and token\r\nrequests and responses, and provides a convenience method to call an API with\r\nfresh tokens. This is the only object that you need to serialize to retain the\r\nauthorization state of the session.\r\n\r\n### Authorizing\r\n\r\nThe OAuth configuration can be fetched via OpenID Connect discovery, or created\r\nmanually. Here we construct it manually by specifying the endpoints.\r\n\r\n```objc\r\n    // property of the app's AppDelegate\r\n    @property(nonatomic, strong, nullable) id<OIDAuthorizationFlowSession> currentAuthorizationFlow;\r\n\r\n    // property of the containing class\r\n    @property(nonatomic, strong, nullable) OIDAuthState *authState;\r\n\r\n    //...\r\n\r\n    OIDServiceConfiguration *configuration =\r\n        [[OIDServiceConfiguration alloc] initWithAuthorizationEndpoint:kAuthorizationEndpoint\r\n                                                         tokenEndpoint:kTokenEndpoint];\r\n    // builds authentication request\r\n    OIDAuthorizationRequest *request =\r\n        [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration\r\n                                                      clientId:kClientID\r\n                                                        scopes:@[OIDScopeOpenID, OIDScopeProfile]\r\n                                                   redirectURL:KRedirectURI\r\n                                                  responseType:OIDResponseTypeCode\r\n                                          additionalParameters:nil];\r\n\r\n    // performs authentication request\r\n    AppDelegate *appDelegate = (AppDelegate *)[UIApplication sharedApplication].delegate;\r\n    NSLog(@\"Initiating authorization request with scope: %@\", request.scope);\r\n\r\n    appDelegate.currentAuthorizationFlow =\r\n        [OIDAuthState authStateByPresentingAuthorizationRequest:request\r\n            presentingViewController:self\r\n                            callback:^(OIDAuthState *_Nullable authState,\r\n                                       NSError *_Nullable error) {\r\n      if (authState) {\r\n        NSLog(@\"Got authorization tokens. Access token: %@\",\r\n              authState.lastTokenResponse.accessToken);\r\n        [self setAuthState:authState];\r\n      } else {\r\n        NSLog(@\"Authorization error: %@\", [error localizedDescription]);\r\n        [self setAuthState:nil];\r\n      }\r\n    }];\r\n```\r\n\r\n### Passing through the Authorization Grant\r\n\r\nThe authorization response URL is returned to the app via the iOS openURL\r\napp delegate method, so you need to pipe this through to the current\r\nauthorization session (created in the previous session).\r\n\r\n```objc\r\n    - (BOOL)application:(UIApplication *)app\r\n                openURL:(NSURL *)url\r\n                options:(NSDictionary<NSString *, id> *)options {\r\n      // Sends the URL to the current authorization flow (if any) which will\r\n      // process it if it relates to an authorization response.\r\n      if ([_currentAuthorizationFlow resumeAuthorizationFlowWithURL:url]) {\r\n        _currentAuthorizationFlow = nil;\r\n        return YES;\r\n      }\r\n\r\n      // Your additional URL handling (if any) goes here.\r\n\r\n      return NO;\r\n    }\r\n```\r\n\r\n### Making API Calls\r\n\r\nAppAuth gives you the raw token information, if you need it. However we\r\nrecommend that users of the `OIDAuthState` convenience wrapper use the provided\r\n`withFreshTokensPerformAction:` method to perform their API calls to avoid\r\nneeding to worry about token freshness.\r\n\r\n```objc\r\n    [_authState withFreshTokensPerformAction:^(NSString *_Nonnull accessToken,\r\n                                               NSString *_Nonnull idToken,\r\n                                               NSError *_Nullable error) {\r\n      if (error) {\r\n        NSLog(@\"Error fetching fresh tokens: %@\", [error localizedDescription]);\r\n        return;\r\n      }\r\n\r\n      // perform your API request using the tokens\r\n    }];\r\n```\r\n\r\n## Included Sample\r\n\r\nTry out the included example project `Example/Example.xcodeproj`.\r\n\r\nBe sure to follow the instructions in [Example/README.md](Example/README.md)\r\nto configure your own OAuth client ID for use with the example.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}